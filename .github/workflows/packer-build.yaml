name: Push workflow

on: [push]

jobs:
  integration-test-and-ami:
    runs-on: ubuntu-latest

    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Install Packer
        run: |
          wget https://releases.hashicorp.com/packer/1.7.3/packer_1.7.3_linux_amd64.zip
          unzip -o packer_1.7.3_linux_amd64.zip -d /usr/local/bin
          rm packer_1.7.3_linux_amd64.zip
  
      - name: Build with Maven
        run: |
          mvn clean install -DskipTests
        working-directory: ${{ github.workspace }}
        

      - name: Print Workspace Contents without artifact
        run: |
          ls -R ${{ github.workspace }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: my-java-artifact
          path: ${{ github.workspace }}/target/*.jar

      - name: Print Uploaded Artifact Location
        run: |
          echo "Contents of the workspace:"
          ls -R ${{ github.workspace }}

      - name: Packer Init
        run: |
            packer init packer

      - name: Print Contents of Artifact Directory
        run: |
            ls -R ${{ github.workspace }}/target/

      - name: Copy Artifact to Packer
        run: |
          cp -r ${{ github.workspace }}/target/*.jar ${{ github.workspace }}/packer/
          
      - name: Print Contents of Packer
        run: |
          ls -R ${{ github.workspace }}/packer/

      - name: Packer Format
        run: |
          packer fmt -check .

      - name: Build AMI with Packer
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          packer build packer/*.pkr.hcl
      
      - name: Retrive AMI ID
        run: |
            echo AMI_ID=$(jq -r '.builds[-1].artifact_id' ./manifest.json | cut -d ":" -f2) >> $GITHUB_ENV
        shell: bash

      
      - name: Create Version of Launch template
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          LAUNCH_TEMPLATE_NAME: ${{ secrets.EC2_TEMPLATE_NAME }}
          SOURCE_VERSION: ${{ secrets.SOURCE_VERSION }}
          AUTO_SCALING_GROUP_NAME: ${{ secrets.AUTO_SCALING_GROUP_NAME }}
        run: |
          echo "LAUNCH_TEMPLATE_NAME: $LAUNCH_TEMPLATE_NAME"
          echo "SOURCE_VERSION: $SOURCE_VERSION"
          aws ec2 create-launch-template-version --launch-template-name $LAUNCH_TEMPLATE_NAME --source-version $SOURCE_VERSION --launch-template-data '{"ImageId":"${{env.AMI_ID}}"}'
          echo "Launch template version created"
        
      - name: Instance refresh auto scale use new Launch template version
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AUTO_SCALING_GROUP_NAME: ${{ secrets.AUTO_SCALING_GROUP_NAME }}
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name $AUTO_SCALING_GROUP_NAME
          echo "Instance refresh for Launch template in ASG completed"      
      

      - name: Instance refresh auto scale to use new launch template version
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AUTO_SCALING_GROUP_NAME: ${{ secrets.AUTO_SCALING_GROUP_NAME }}
        run: |
          INSTANCE_REFRESH_ID=$(aws autoscaling start-instance-refresh --auto-scaling-group-name $AUTO_SCALING_GROUP_NAME --query 'InstanceRefreshId' --output text)
          echo "Instance refresh for Launch template ID in AS started with ID: ${INSTANCE_REFRESH_ID}"

          # Wait for the instance refresh to complete
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name auto-scaling-group --instance-refresh-ids ${INSTANCE_REFRESH_ID} --query 'InstanceRefreshes[0].Status' --output text)
            if [ "$STATUS" == "Successful" ]; then
              echo "Instance refresh for Launch template ID in AS completed successfully."
              break
            elif [ "$STATUS" == "Failed" ]; then
              echo "Instance refresh for Launch template ID in AS failed."
              exit 1
            else
              echo "Waiting for instance refresh to complete. Current status: $STATUS"
              sleep 60  # Adjust the sleep interval as needed
            fi
          done


      - name: Check Previous Step Status
        run: exit 1
        if: ${{ failure() }}

